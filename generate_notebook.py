# Generated by Gemini or something

import os

ROOT_DIR = 'code'
OUTPUT_FILE = 'notebook.typ'
EXCLUDE_DIRS = {'.git', '.vscode', '__pycache__', 'build'}
NOTEBOOK_TITLE = "Templatemengo"
AUTHOR_NAME = "Los Tralalelitos dizem FLAMENGOOO"

def write_typst_preamble(file_handle):
    preamble = f"""
// Set document properties.
#set document(title: "{NOTEBOOK_TITLE}", author: "{AUTHOR_NAME}")

// Configure page settings for printing: A4 paper, small margins.
#set page(
  paper: "a4",
  margin: (left: 1cm, right: 1cm, top: 1.5cm, bottom: 1.5cm),
  numbering: "1",
  flipped: true,
)

// Set the base font for the document. A monospaced font is good for code.
#set text(font: "DejaVu Sans Mono", size: 8pt)

// Style the main headings (e.g., "Data Structures").
#show heading.where(level: 1): it => {{
  v(1.5em, weak: true)
  align(center, text(14pt, style: "italic", weight: "bold", it))
  line(length: 100%)
  v(1em)
}}

// Style subheadings (e.g., "Segment Tree").
#show heading.where(level: 2): it => {{
  v(1.2em, weak: true)
  text(11pt, weight: "bold", it)
  v(0.5em)
}}

// --- Table of Contents ---
#columns(3, gutter: 1.2cm)[\n

#outline(
  title: "Contents",
  depth: 3,
  indent: auto,
)

#colbreak()

// --- Start of the Code Content ---
// Use the native two-column layout element.
"""
    file_handle.write(preamble)


def process_directory(path, file_handle, level):
    """Recursively processes a directory to add its contents to the Typst file."""
    try:
        entries = sorted(os.listdir(path))
    except FileNotFoundError:
        print(f"Error: Directory not found '{path}'")
        return

    for entry in entries:
        full_path = os.path.join(path, entry)
        
        if os.path.isdir(full_path):
            if entry in EXCLUDE_DIRS:
                continue
            dir_title = entry.replace('_', ' ').replace('-', ' ').title()
            file_handle.write(f"{'=' * level} {dir_title}\n\n")
            process_directory(full_path, file_handle, level + 1)
        
        elif os.path.isfile(full_path) and entry.endswith('.cpp'):
            file_handle.write(f"{'=' * level} {entry}\n")
            file_handle.write("```cpp\n")
            try:
                with open(full_path, 'r', encoding='utf-8') as code_file:
                    content = code_file.read()
                    safe_content = content.replace('```', '`` `')
                    file_handle.write(safe_content)
            except Exception as e:
                file_handle.write(f"// Error reading file: {e}")
            file_handle.write("\n```\n\n")
            # No more row-break needed! Columns flow automatically.


def main():
    """Main function to generate the Typst notebook."""
    print(f"Starting to generate '{OUTPUT_FILE}'...")
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        write_typst_preamble(f)
        process_directory(ROOT_DIR, f, level=1)
        # Close the columns block at the end of the document.
        f.write("]\n")
    print("âœ… Typst notebook generated successfully!")
    print(f"Now, compile it using: typst compile {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
